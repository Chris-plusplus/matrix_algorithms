Zadanie 1 i 2 w c++:

#include <array>
#include <string_view>
#include <chrono>
#include <format>
#include <fstream>
#include <iostream>
#include <random>
#include <stacktrace>

namespace operation_counting {

enum class operation {
	add,
	sub,
	mul,
	div,
	unknown,
};

size_t counter[(size_t)operation::unknown]{};

void reset() noexcept {
	for (auto&& v : counter) {
		v = 0;
	}
}

consteval std::array<size_t, 4> parse_operation(std::string_view str) noexcept {
	std::array<size_t, 4> result{};
	for (auto&& c : str) {
		if (c == '+') {
			++result[(size_t)operation::add];
		} else if (c == '-') {
			++result[(size_t)operation::sub];
		} else if (c == '*') {
			++result[(size_t)operation::mul];
		} else if (c == '/') {
			++result[(size_t)operation::div];
		}
	}

	return result;
}

template<const std::array<size_t, 4> Add, auto Counter = counter>
void increment_counter() noexcept {
	if constexpr (Add[(size_t)operation::add]) {
		Counter[(size_t)operation::add] += Add[(size_t)operation::add];
	}
	if constexpr (Add[(size_t)operation::sub]) {
		Counter[(size_t)operation::sub] += Add[(size_t)operation::sub];
	}
	if constexpr (Add[(size_t)operation::mul]) {
		Counter[(size_t)operation::mul] += Add[(size_t)operation::mul];
	}
	if constexpr (Add[(size_t)operation::div]) {
		Counter[(size_t)operation::div] += Add[(size_t)operation::div];
	}
}

#define op_impl(...) \
	(operation_counting::increment_counter<operation_counting::parse_operation(#__VA_ARGS__)>(), __VA_ARGS__)

#define op(...) op_impl(__VA_ARGS__)
// #define op(...) __VA_ARGS__

} // namespace operation_counting

namespace chr = std::chrono;
using clk = chr::high_resolution_clock;

#ifndef MATRIX_DEBUG
#define MATRIX_DEBUG 0
#endif

#if MATRIX_DEBUG
#define ASSERT(...)                                                               \
	if (not(__VA_ARGS__)) {                                                       \
		std::cout << "line " << __LINE__ << ": " << #__VA_ARGS__ << " failed\n "; \
		throw ::std::logic_error("bruh");                                         \
	}
#else
#define ASSERT(...) ((void)0)
#endif

/// @brief Klasa macierzy, dane przechowywane w jednym ciągłym wektorze (cache-friendly)
class Matrix {
public:
	Matrix(size_t rows, size_t cols) noexcept: _rows{ rows }, _cols{ cols }, _storage(_rows * _cols) {}

	auto begin() noexcept { return _storage.begin(); }

	auto begin() const noexcept { return _storage.begin(); }

	auto cbegin() const noexcept { return _storage.cbegin(); }

	auto rbegin() noexcept { return _storage.rbegin(); }

	auto rbegin() const noexcept { return _storage.rbegin(); }

	auto crbegin() const noexcept { return _storage.crbegin(); }

	auto end() noexcept { return _storage.end(); }

	auto end() const noexcept { return _storage.end(); }

	auto cend() const noexcept { return _storage.cend(); }

	auto rend() noexcept { return _storage.rend(); }

	auto rend() const noexcept { return _storage.rend(); }

	auto crend() const noexcept { return _storage.crend(); }

	Matrix(std::initializer_list<std::initializer_list<double>> data):
		_rows{ data.size() },
		_cols{ data.begin()->size() },
		_storage(_rows * _cols) {
		auto i = begin();
		for (auto&& row_list : data) {
			for (auto&& v : row_list) {
				*(i++) = v;
			}
		}
	}

	double& operator[](const std::array<size_t, 2> idx) noexcept { return _storage[_cols * idx[0] + idx[1]]; }

	const double& operator[](const std::array<size_t, 2> idx) const noexcept {
		return _storage[_cols * idx[0] + idx[1]];
	}

	Matrix& operator+=(const Matrix& other) noexcept(!MATRIX_DEBUG) {
		ASSERT(_rows >= other._rows and _cols >= other._cols);
		const auto ending = other.end();
		if (_rows == other._rows and _cols == other._cols) {
			auto i2 = other.begin();
			for (auto i1 = begin(); i2 != ending; ++i1, ++i2) {
				auto& v1 = *i1;
				auto& v2 = *i2;
				op(v1 += v2);
			}
		} else {
			const auto coldiff = _cols - other._cols;
			auto i1 = begin();
			auto i2 = other.begin();
			for (size_t col2 = 0; i2 != ending; ++i1, ++i2) {
				auto& v1 = *i1;
				auto& v2 = *i2;
				op(v1 += v2);

				col2 = (col2 + 1) % other.cols();
				if (col2 == 0) {
					i1 += coldiff;
				}
			}
		}

		return *this;
	}

	Matrix operator+(const Matrix& other) const noexcept {
		if (_rows >= other._rows and _cols >= other._cols) {
			auto temp = *this;
			temp += other;
			return temp;
		} else {
			auto temp = other;
			temp += *this;
			return temp;
		}
	}

	Matrix& operator-=(const Matrix& other) noexcept(!MATRIX_DEBUG) {
		ASSERT(_rows >= other._rows and _cols >= other._cols);
		const auto ending = other.end();
		if (_rows == other._rows and _cols == other._cols) {
			auto i2 = other.begin();
			for (auto i1 = begin(); i2 != ending; ++i1, ++i2) {
				auto& v1 = *i1;
				auto& v2 = *i2;
				op(v1 -= v2);
			}
		} else {
			const auto coldiff = _cols - other._cols;
			auto i1 = begin();
			auto i2 = other.begin();
			for (size_t col2 = 0; i2 != ending; ++i1, ++i2) {
				auto& v1 = *i1;
				auto& v2 = *i2;
				op(v1 -= v2);

				col2 = (col2 + 1) % other.cols();
				if (col2 == 0) {
					i1 += coldiff;
				}
			}
		}
		return *this;
	}

	Matrix operator-(const Matrix& other) const noexcept {
		auto temp = *this;
		temp -= other;
		return temp;
	}

	Matrix operator*(const Matrix& other) const noexcept(!MATRIX_DEBUG) {
		ASSERT(_cols == other._rows);

		auto result = Matrix(_rows, other._cols);
		for (int i = 0; i < _rows; ++i) {
			for (int j = 0; j < other._cols; ++j) {
				for (int k = 0; k < _cols; ++k) {
					auto& in_result = result._storage[i * other._cols + j];
					auto& in_this = this->_storage[i * _cols + k];
					auto& in_other = other._storage[k * other._cols + j];

					op(in_result += in_this * in_other);
				}
			}
		}

		return result;
	}

	/// @brief Kopiuje dane z innej macierzy
	/// @param idx - miejsce gdzie skopiować
	/// @param other - macierz z której kopiować
	/// @param subidx - miejsce skąd kopiować
	Matrix& set_at(
		const std::array<size_t, 2> idx,
		const Matrix& other,
		const std::array<size_t, 2> subidx = { 0, 0 }
	) noexcept {
		for (size_t row = idx[0]; row < idx[0] + other._rows - subidx[0] && row < _rows; ++row) {
			for (size_t column = idx[1]; column < idx[1] + other._cols - subidx[1] && column < _cols; ++column) {
				(*this)[{ row, column }] = other[{ row - idx[0] + subidx[0], column - idx[1] + subidx[1] }];
			}
		}
		return *this;
	}

	size_t rows() const noexcept { return _rows; }

	size_t cols() const noexcept { return _cols; }

	/// @brief Generuje losową macierz
	/// @param rows - liczba wierszy
	/// @param cols - liczba kolumn
	/// @param seed - seed do generatora liczb pseudolosowych
	/// @param a - początek
	/// @param b
	/// @return
	static Matrix random(
		size_t rows,
		size_t cols,
		std::random_device::result_type seed = 0,
		double a = 0.00000001,
		double b = 1.0
	) noexcept {
		auto mt = std::mt19937(seed);
		auto random_double = std::uniform_real_distribution<double>(a, b);

		auto result = Matrix(rows, cols);
		for (auto&& v : result) {
			do {
				v = random_double(mt);
			} while (v == 1.0);
		}

		return result;
	}

	std::array<Matrix, 4> split() const noexcept {
		const size_t half_rows = _rows / 2;
		const size_t half_cols = _cols / 2;

		std::array<Matrix, 4> result{
			Matrix(half_rows, half_cols),
			Matrix(half_rows, _cols - half_cols),
			Matrix(_rows - half_rows, half_cols),
			Matrix(_rows - half_rows, _cols - half_cols),
		};
		result[0].set_at({ 0, 0 }, *this, { 0, 0 });
		result[1].set_at({ 0, 0 }, *this, { 0, half_cols });
		result[2].set_at({ 0, 0 }, *this, { half_rows, 0 });
		result[3].set_at({ 0, 0 }, *this, { half_rows, half_cols });

		return result;
	}

	std::array<Matrix, 4> split(const bool A) const noexcept {
		const size_t rows = _rows % 2 == 0 ? _rows : _rows + 1;
		const size_t cols = _cols % 2 == 0 ? _cols : _cols + 1;
		const bool padding_rows_A = A and _rows % 2;
		const bool padding_cols_B = not A and _cols % 2;
		const size_t half_rows = rows / 2;
		const size_t half_cols = cols / 2;

		std::array<Matrix, 4> result{
			Matrix(half_rows, half_cols),
			Matrix(half_rows, cols - half_cols - padding_cols_B),
			Matrix(rows - half_rows, half_cols),
			Matrix(rows - half_rows - padding_rows_A, cols - half_cols - padding_cols_B),
		};
		result[0].set_at({ 0, 0 }, *this, { 0, 0 });
		result[1].set_at({ 0, 0 }, *this, { 0, half_cols });
		result[2].set_at({ 0, 0 }, *this, { half_rows, 0 });
		result[3].set_at({ 0, 0 }, *this, { half_rows, half_cols });

		return result;
	}

private:

	const size_t _rows;
	const size_t _cols;
	std::vector<double> _storage;
};

Matrix binet_recursive(const Matrix& A, const Matrix& B) noexcept(!MATRIX_DEBUG) {
	if (A.rows() == 1 or A.cols() == 1 or B.rows() == 1 or B.cols() == 1) {
		return A * B;
	}

	auto&& [A_11, A_12, A_21, A_22] = A.split();
	auto&& [B_11, B_12, B_21, B_22] = B.split();

	auto C = Matrix(A.rows(), B.cols());
	{
		auto temp = binet_recursive(A_11, B_11);
		temp += binet_recursive(A_12, B_21);
		C.set_at({ 0, 0 }, temp);
	}
	{
		auto temp = binet_recursive(A_11, B_12);
		temp += binet_recursive(A_12, B_22);
		C.set_at({ 0, B_11.cols() }, temp);
	}
	{
		auto temp = binet_recursive(A_21, B_11);
		temp += binet_recursive(A_22, B_21);
		C.set_at({ A_11.rows(), 0 }, temp);
	}
	{
		auto temp = binet_recursive(A_21, B_12);
		temp += binet_recursive(A_22, B_22);
		C.set_at({ A_11.rows(), B_11.cols() }, temp);
	}

	return C;
}

Matrix strassen_recursive(const Matrix& A, const Matrix& B) noexcept(!MATRIX_DEBUG) {
	if (A.rows() == 1 or A.cols() == 1 or B.rows() == 1 or B.cols() == 1) {
		return A * B;
	}

	auto&& [A_11, A_12, A_21, A_22] = A.split(true);
	auto&& [B_11, B_12, B_21, B_22] = B.split(false);

	auto M_1 = strassen_recursive(A_11 + A_22, B_11 + B_22);
	auto M_4 = strassen_recursive(A_22, B_21 - B_11);
	auto M_5 = strassen_recursive(A_11 + A_12, B_22);
	auto M_7 = strassen_recursive(A_12 - A_22, B_21 + B_22);

	auto C = Matrix(A.rows(), B.cols());
	{
		auto C_11 = M_1 + M_4 - M_5 + M_7;
		C.set_at({ 0, 0 }, C_11);
	}
	auto M_3 = strassen_recursive(A_11, B_12 - B_22);
	{
		auto C_12 = M_3 + M_5;
		C.set_at({ 0, B_11.cols() }, C_12);
	}
	auto M_2 = strassen_recursive(A_21 + A_22, B_11);
	{
		auto C_21 = M_2 + M_4;
		C.set_at({ A_11.rows(), 0 }, C_21);
	}
	auto M_6 = strassen_recursive(A_21 - A_11, B_11 + B_12);
	{
		auto C_22 = M_1 - M_2 + M_3 + M_6;
		C.set_at({ A_11.rows(), B_11.cols() }, C_22);
	}

	return C;
}

int main() {
	auto times_binet = std::ofstream("times_binet4.txt");
	auto times_strassen = std::ofstream("times_strassen4.txt");
	auto ops_binet = std::ofstream("ops_binet4.txt");
	auto ops_strassen = std::ofstream("ops_strassen4.txt");
	times_binet << "N\ttime(ms)\n";
	times_strassen << "N\ttime(ms)\n";
	ops_binet << "N\t+\t-\t*\t/\n";
	ops_strassen << "N\t+\t-\t*\t/\n";

	for (size_t i = 1; i <= 1'000; i += [i]() {
			 if (i < 150) {
				 return 1;
			 } else if (i < 250) {
				 return 5;
			 } else if (i < 500) {
				 return 10;
			 } else {
				 return 100;
			 }
		 }()) {
		const size_t N = i;

		std::cout << i << '\n';

		auto mat1 = Matrix::random(N, N, 0);
		auto mat2 = Matrix::random(N, N, 1);

		operation_counting::reset();
		{
			auto start = clk::now();
			auto mat3 = binet_recursive(mat1, mat2);
			auto end = clk::now();

			/*std::cout << std::format(
				"BINET:\n+: {}\n-: {}\n*: {}\n/: {}\ntime: {}\n",
				operation_counting::counter[0],
				operation_counting::counter[1],
				operation_counting::counter[2],
				operation_counting::counter[3],
				chr::duration_cast<chr::milliseconds>(end - start)
			);*/
			times_binet << std::format("{}\t{}\n", N, chr::duration_cast<chr::milliseconds>(end - start).count());
			ops_binet << std::format(
				"{}\t{}\t{}\t{}\t{}\n",
				N,
				operation_counting::counter[(size_t)operation_counting::operation::add],
				operation_counting::counter[(size_t)operation_counting::operation::sub],
				operation_counting::counter[(size_t)operation_counting::operation::mul],
				operation_counting::counter[(size_t)operation_counting::operation::div]
			);
			operation_counting::reset();
		}
		{
			auto start = clk::now();
			auto mat3 = strassen_recursive(mat1, mat2);
			auto end = clk::now();

			/*std::cout << std::format(
				"STRASSEN:\n+: {}\n-: {}\n*: {}\n/: {}\ntime: {}\n",
				operation_counting::counter[0],
				operation_counting::counter[1],
				operation_counting::counter[2],
				operation_counting::counter[3],
				chr::duration_cast<chr::milliseconds>(end - start)
			);*/
			times_strassen << std::format("{}\t{}\n", N, chr::duration_cast<chr::milliseconds>(end - start).count());
			ops_strassen << std::format(
				"{}\t{}\t{}\t{}\t{}\n",
				N,
				operation_counting::counter[(size_t)operation_counting::operation::add],
				operation_counting::counter[(size_t)operation_counting::operation::sub],
				operation_counting::counter[(size_t)operation_counting::operation::mul],
				operation_counting::counter[(size_t)operation_counting::operation::div]
			);
			operation_counting::reset();
		}
	}
}


Zadanie 3 w pythonie:
plik ai_recursive.py, który implementuje zadanie 3:

import math
import numpy as np

flop_counter = 0
flop_counter_mul = 0


def increment_flop_counter(count=1):
    global flop_counter
    flop_counter += count


def increment_flop_counter_mul(count=1):
    global flop_counter_mul
    flop_counter_mul += count


def basic_mul_case(A, B):
    global flop_counter, flop_counter_mul
    a11, a12, a13, a14, a15 = A[0, 0], A[0, 1], A[0, 2], A[0, 3], A[0, 4]
    a21, a22, a23, a24, a25 = A[1, 0], A[1, 1], A[1, 2], A[1, 3], A[1, 4]
    a31, a32, a33, a34, a35 = A[2, 0], A[2, 1], A[2, 2], A[2, 3], A[2, 4]
    a41, a42, a43, a44, a45 = A[3, 0], A[3, 1], A[3, 2], A[3, 3], A[3, 4]

    b11, b12, b13, b14, b15 = B[0, 0], B[0, 1], B[0, 2], B[0, 3], B[0, 4]
    b21, b22, b23, b24, b25 = B[1, 0], B[1, 1], B[1, 2], B[1, 3], B[1, 4]
    b31, b32, b33, b34, b35 = B[2, 0], B[2, 1], B[2, 2], B[2, 3], B[2, 4]
    b41, b42, b43, b44, b45 = B[3, 0], B[3, 1], B[3, 2], B[3, 3], B[3, 4]
    b51, b52, b53, b54, b55 = B[4, 0], B[4, 1], B[4, 2], B[4, 3], B[4, 4]

    h1 = a32 * (-b21 - b25 - b31)
    h2 = (a22 + a25 - a35) * (-b25 - b51)
    h3 = (-a31 - a41 + a42) * (-b11 + b25)
    h4 = (a12 + a14 + a34) * (-b25 - b41)
    h5 = (a15 + a22 + a25) * (-b24 + b51)
    h6 = (-a22 - a25 - a45) * (b23 + b51)
    h7 = (-a11 + a41 - a42) * (b11 + b24)
    h8 = (a32 - a33 - a43) * (-b23 + b31)
    h9 = (-a12 - a14 + a44) * (b23 + b41)
    h10 = (a22 + a25) * b51
    h11 = (-a21 - a41 + a42) * (-b11 + b22)
    h12 = (a41 - a42) * b11
    h13 = (a12 + a14 + a24) * (b22 + b41)
    h14 = (a13 - a32 + a33) * (b24 + b31)
    h15 = (-a12 - a14) * b41
    h16 = (-a32 + a33) * b31
    h17 = (a12 + a14 - a21 + a22 - a23 + a24 - a32 + a33 - a41 + a42) * b22
    h18 = a21 * (b11 + b12 + b52)
    h19 = (-a23) * (b31 + b32 + b52)
    h20 = (-a15 + a21 + a23 - a25) * (-b11 - b12 + b14 - b52)
    h21 = (a21 + a23 - a25) * b52
    h22 = (a13 - a14 - a24) * (b11 + b12 - b14 - b31 - b32 + b34 + b44)
    h23 = a13 * (-b31 + b34 + b44)
    h24 = a15 * (-b44 - b51 + b54)
    h25 = (-a11) * (b11 - b14)
    h26 = (-a13 + a14 + a15) * b44
    h27 = (a13 - a31 + a33) * (b11 - b14 + b15 + b35)
    h28 = (-a34) * (-b35 - b41 - b45)
    h29 = a31 * (b11 + b15 + b35)
    h30 = (a31 - a33 + a34) * b35
    h31 = (-a14 - a15 - a34) * (-b44 - b51 + b54 - b55)
    h32 = (a21 + a41 + a44) * (b13 - b41 - b42 - b43)
    h33 = a43 * (-b31 - b33)
    h34 = a44 * (-b13 + b41 + b43)
    h35 = (-a45) * (b13 + b51 + b53)
    h36 = (a23 - a25 - a45) * (b31 + b32 + b33 + b52)
    h37 = (-a41 - a44 + a45) * b13
    h38 = (-a23 - a31 + a33 - a34) * (b35 + b41 + b42 + b45)
    h39 = (-a31 - a41 - a44 + a45) * (b13 + b51 + b53 + b55)
    h40 = (-a13 + a14 + a15 - a44) * (-b31 - b33 + b34 + b44)
    h41 = (-a11 + a41 - a45) * (b13 + b31 + b33 - b34 + b51 + b53 - b54)
    h42 = (-a21 + a25 - a35) * (-b11 - b12 - b15 + b41 + b42 + b45 - b52)
    h43 = a24 * (b41 + b42)
    h44 = (a23 + a32 - a33) * (b22 - b31)
    h45 = (-a33 + a34 - a43) * (b35 + b41 + b43 + b45 + b51 + b53 + b55)
    h46 = (-a35) * (-b51 - b55)
    h47 = (a21 - a25 - a31 + a35) * (b11 + b12 + b15 - b41 - b42 - b45)
    h48 = (-a23 + a33) * (b22 + b32 + b35 + b41 + b42 + b45)
    h49 = (-a11 - a13 + a14 + a15 - a21 - a23 + a24 + a25) * (-b11 - b12 + b14)
    h50 = (-a14 - a24) * (b22 - b31 - b32 + b34 - b42 + b44)
    h51 = a22 * (b21 + b22 - b51)
    h52 = a42 * (b11 + b21 + b23)
    h53 = (-a12) * (-b21 + b24 + b41)
    h54 = (a12 + a14 - a22 - a25 - a32 + a33 - a42 + a43 - a44 - a45) * b23
    h55 = (a14 - a44) * (-b23 + b31 + b33 - b34 + b43 - b44)
    h56 = (a11 - a15 - a41 + a45) * (b31 + b33 - b34 + b51 + b53 - b54)
    h57 = (-a31 - a41) * (-b13 - b15 - b25 - b51 - b53 - b55)
    h58 = (-a14 - a15 - a34 - a35) * (-b51 + b54 - b55)
    h59 = (-a33 + a34 - a43 + a44) * (b41 + b43 + b45 + b51 + b53 + b55)
    h60 = (a25 + a45) * (b23 - b31 - b32 - b33 - b52 - b53)
    h61 = (a14 + a34) * (b11 - b14 + b15 - b25 - b44 + b45 - b51 + b54 - b55)
    h62 = (a21 + a41) * (b12 + b13 + b22 - b41 - b42 - b43)
    h63 = (-a33 - a43) * (-b23 - b33 - b35 - b41 - b43 - b45)
    h64 = (a11 - a13 - a14 + a31 - a33 - a34) * (b11 - b14 + b15)
    h65 = (-a11 + a41) * (-b13 + b14 + b24 - b51 - b53 + b54)
    h66 = (a11 - a12 + a13 - a15 - a22 - a25 - a32 + a33 - a41 + a42) * b24
    h67 = (a25 - a35) * (b11 + b12 + b15 - b25 - b41 - b42 - b45 + b52 + b55)
    h68 = (a11 + a13 - a14 - a15 - a41 - a43 + a44 + a45) * (-b31 - b33 + b34)
    h69 = (-a13 + a14 - a23 + a24) * (-b24 - b31 - b32 + b34 - b52 + b54)
    h70 = (a23 - a25 + a43 - a45) * (-b31 - b32 - b33)
    h71 = (-a31 + a33 - a34 + a35 - a41 + a43 - a44 + a45) * (-b51 - b53 - b55)
    h72 = (-a21 - a24 - a41 - a44) * (b41 + b42 + b43)
    h73 = (a13 - a14 - a15 + a23 - a24 - a25) * (b11 + b12 - b14 + b24 + b52 - b54)
    h74 = (a21 - a23 + a24 - a31 + a33 - a34) * (b41 + b42 + b45)
    h75 = (-(a12 + a14 - a22 - a25 - a31 + a32 + a34 + a35 - a41 + a42)) * b25
    h76 = (a13 + a33) * (-b11 + b14 - b15 + b24 + b34 - b35)

    c11 = -h10 + h12 + h14 - h15 - h16 + h53 + h5 - h66 - h7
    c21 = h10 + h11 - h12 + h13 + h15 + h16 - h17 - h44 + h51
    c31 = h10 - h12 + h15 + h16 - h1 + h2 + h3 - h4 + h75
    c41 = -h10 + h12 - h15 - h16 + h52 + h54 - h6 - h8 + h9
    c12 = h13 + h15 + h20 + h21 - h22 + h23 + h25 - h43 + h49 + h50
    c22 = -h11 + h12 - h13 - h15 - h16 + h17 + h18 - h19 - h21 + h43 + h44
    c32 = -h16 - h19 - h21 - h28 - h29 - h38 + h42 + h44 - h47 + h48
    c42 = h11 - h12 - h18 + h21 - h32 + h33 - h34 - h36 + h62 - h70
    c13 = h15 + h23 + h24 + h34 - h37 + h40 - h41 + h55 - h56 - h9
    c23 = -h10 + h19 + h32 + h35 + h36 + h37 - h43 - h60 - h6 - h72
    c33 = -h16 - h28 + h33 + h37 - h39 + h45 - h46 + h63 - h71 - h8
    c43 = h10 + h15 + h16 - h33 + h34 - h35 - h37 - h54 + h6 + h8 - h9
    c14 = -h10 + h12 + h14 - h16 + h23 + h24 + h25 + h26 + h5 - h66 - h7
    c24 = h10 + h18 - h19 + h20 - h22 - h24 - h26 - h5 - h69 + h73
    c34 = -h14 + h16 - h23 - h26 + h27 + h29 + h31 + h46 - h58 + h76
    c44 = h12 + h25 + h26 - h33 - h35 - h40 + h41 + h65 - h68 - h7
    c15 = h15 + h24 + h25 + h27 - h28 + h30 + h31 - h4 + h61 + h64
    c25 = -h10 - h18 - h2 - h30 - h38 + h42 - h43 + h46 + h67 + h74
    c35 = -h10 + h12 - h15 + h28 + h29 - h2 - h30 - h3 + h46 + h4 - h75
    c45 = -h12 - h29 + h30 - h34 + h35 + h39 + h3 - h45 + h57 + h59

    increment_flop_counter(614)  # flops_cnt result
    increment_flop_counter_mul(76)

    C = np.zeros((4, 5))
    C[0, 0], C[0, 1], C[0, 2], C[0, 3], C[0, 4] = c11, c12, c13, c14, c15
    C[1, 0], C[1, 1], C[1, 2], C[1, 3], C[1, 4] = c21, c22, c23, c24, c25
    C[2, 0], C[2, 1], C[2, 2], C[2, 3], C[2, 4] = c31, c32, c33, c34, c35
    C[3, 0], C[3, 1], C[3, 2], C[3, 3], C[3, 4] = c41, c42, c43, c44, c45

    return C


def mat_mul(A, B):
    ay, ax = A.shape[0], A.shape[1]
    by, bx = B.shape[0], B.shape[1]

    if (ay == 4 and ax == 5) and (by == 5 and bx == 5):
        return basic_mul_case(A, B)

    sub_len_y = len(A) // 4
    sub_len_x = len(A[0]) // 5
    subA = {}
    for a in range(4):
        for b in range(5):
            subA[f"A{a}{b}"] = A[sub_len_y * a: sub_len_y * a + sub_len_y, sub_len_x * b: sub_len_x * b + sub_len_x]

    sub_len = len(B) // 5
    subB = {}
    for a in range(5):
        for b in range(5):
            subB[f"B{a}{b}"] = B[sub_len * a: sub_len * a + sub_len, sub_len * b: sub_len * b + sub_len]

    subC = {}
    for a in range(4):
        for b in range(5):
            for i in range(5):
                if f"C{a}{b}" not in subC:
                    subC[f"C{a}{b}"] = 0
                #subC[f"C{a}{b}"] += mat_mul(subA[f"A{a}{i}"], subB[f"B{i}{b}"])
                if np.all(np.equal(subA[f"A{a}{i}"], 0)) or np.all(np.equal(subB[f"B{i}{b}"], 0)):
                    subC[f"C{a}{b}"] += np.zeros((len(subA[f"A{a}{i}"]), len(subB[f"B{i}{b}"])))
                else:
                    subC[f"C{a}{b}"] += mat_mul(subA[f"A{a}{i}"], subB[f"B{i}{b}"])
                increment_flop_counter(1)  # add

    return np.vstack(
        (
            np.hstack((subC["C00"], subC["C01"], subC["C02"], subC["C03"], subC["C04"])),
            np.hstack((subC["C10"], subC["C11"], subC["C12"], subC["C13"], subC["C14"])),
            np.hstack((subC["C20"], subC["C21"], subC["C22"], subC["C23"], subC["C24"])),
            np.hstack((subC["C30"], subC["C31"], subC["C32"], subC["C33"], subC["C34"]))
        )
    )


def run_ai(A, B):
    global flop_counter, flop_counter_mul
    flop_counter = 0  # Reset the counter
    flop_counter_mul = 0  # Reset the counter
    ay, ax = A.shape[0], A.shape[1]
    by, bx = B.shape[0], B.shape[1]

    max_size_four = find_next_four_power(ay)
    max_size_five = max(find_next_five_power(ax), find_next_five_power(by), find_next_five_power(bx))

    if max_size_four > max_size_five:
        max_size = int(math.log(max_size_four, 4))
    else:
        max_size = int(math.log(max_size_five, 5))

    A_edited = add_zero_rows_and_columns4x5(A, max_size)
    B_edited = add_zero_rows_and_columns5x5(B, max_size)

    result = mat_mul(A_edited, B_edited)
    result = restore_original_form(result, len(B), len(B[0]))

    return result, flop_counter, flop_counter_mul


def add_zero_rows_and_columns5x5(A, max_size):
    n = A.shape[0]

    max_size = 5 ** max_size
    if n == max_size: return A

    remaining = max_size - n

    A = np.vstack([A, np.zeros((remaining, n))])
    A = np.hstack([A, np.zeros((max_size, remaining))])

    return A


def add_zero_rows_and_columns4x5(A, max_size):
    y = A.shape[0]
    x = A.shape[1]

    next4 = 4 ** max_size
    next5 = 5 ** max_size

    remainingY = next4 - y
    remainingX = next5 - x

    if y == max_size and x == max_size: return A

    A = np.vstack([A, np.zeros((remainingY, x))])
    A = np.hstack([A, np.zeros((next4, remainingX))])

    return A


def find_next_five_power(n):
    return 5 ** math.ceil(math.log(n, 5))


def find_next_four_power(n):
    return 4 ** math.ceil(math.log(n, 4))


def restore_original_form(A, ay, ax):
    A = A[:ay, :ax]
    return A



plik ai_test.py, który testuje działanie programu:

import unittest
import numpy as np
from random import randint
from ai_recursive import run_ai


class AITest(unittest.TestCase):
    def test_MultiplicationTest(self):
        for n in range(2, 30):
            A = generate_random_matrix(n, n, -11, 24)
            B = generate_random_matrix(n, n, -11, 24)

            expected = np.dot(A, B)
            given, flops = run_ai(A, B)

            print(n, flops)

            # Compare each element of the matrix
            for a in range(A.shape[0]):
                for b in range(A.shape[1]):
                    self.assertEqual(np.round(expected[a][b], 5), np.round(given[a][b], 5))


def generate_random_matrix(rows, columns, min_val, max_val):
    matrix = np.zeros((rows, columns))
    for a in range(rows):
        for b in range(columns):
            matrix[a][b] = randint(min_val, max_val)

    return np.array(matrix)


if __name__ == '__main__':
    unittest.main()

